commit 6edb9a8446bc629199723a96fa5a35a8a3f1e7c5
Author: Christopher Friedt <chrisfriedt@gmail.com>
Date:   Fri Jan 13 10:46:56 2012 -0500

    work around for crappy arm implementation

diff --git a/libc/unistd/abort.c b/libc/unistd/abort.c
index 3e3aab0..ad1c902 100644
--- a/libc/unistd/abort.c
+++ b/libc/unistd/abort.c
@@ -34,18 +34,8 @@
 #include "thread_private.h"
 #include "atexit.h"
 
-/* temporary, for bug hunting */
-#include "logd.h"
-#define debug_log(format, ...)  \
-    __libc_android_log_print(ANDROID_LOG_DEBUG, "libc-abort", (format), ##__VA_ARGS__ )
-
-#ifdef __arm__
-void
-__libc_android_abort(void)
-#else
 void
 abort(void)
-#endif
 {
 	struct atexit *p = __atexit;
 	static int cleanup_called = 0;
@@ -103,28 +93,3 @@ abort(void)
 	_exit(1);
 }
 
-#ifdef __arm__
-/*
- * abort() does not return, which gcc interprets to mean that it doesn't
- * need to preserve any of the callee-save registers.  Unfortunately this
- * includes the link register, so if LR is used there is no way to determine
- * which function called abort().
- *
- * We work around this by inserting a trivial stub that doesn't alter
- * any of the "interesting" registers and thus doesn't need to save them.
- * We can't just call __libc_android_abort from C because gcc uses "bl"
- * without first saving LR, so we use an asm statement.  This also has
- * the side-effect of replacing abort() with __libc_android_abort() in
- * the stack trace.
- *
- * Ideally __libc_android_abort would be static, but I haven't figured out
- * how to tell gcc to call a static function from an asm statement.
- */
-void
-abort(void)
-{
-    asm ("b __libc_android_abort");
-    _exit(1);       /* suppress gcc noreturn warnings */
-}
-#endif
-
