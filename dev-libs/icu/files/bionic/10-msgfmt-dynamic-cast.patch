commit a3cea70f6e959c8f152061eb936652b9dba948d6
Author: Christopher Friedt <chrisfriedt@gmail.com>
Date:   Tue May 10 00:34:02 2011 -0400

    remove dynamic_cast

diff --git a/i18n/msgfmt.cpp b/i18n/msgfmt.cpp
index b529246..a7db231 100644
--- a/i18n/msgfmt.cpp
+++ b/i18n/msgfmt.cpp
@@ -729,7 +729,7 @@ MessageFormat::toPattern(UnicodeString& appendTo) const {
         if (fmt == NULL) {
             // do nothing, string format
         }
-        else if ((decfmt = dynamic_cast<DecimalFormat*>(fmt)) != NULL) {
+        else if ((decfmt = (DecimalFormat*)(fmt)) != NULL) {
             UErrorCode ec = U_ZERO_ERROR;
             NumberFormat& formatAlias = *decfmt;
             NumberFormat *defaultTemplate = NumberFormat::createInstance(fLocale, ec);
@@ -761,7 +761,7 @@ MessageFormat::toPattern(UnicodeString& appendTo) const {
             delete percentTemplate;
             delete integerTemplate;
         }
-        else if ((sdtfmt = dynamic_cast<SimpleDateFormat*>(fmt)) != NULL) {
+        else if ((sdtfmt = (SimpleDateFormat*)(fmt)) != NULL) {
             DateFormat& formatAlias = *sdtfmt;
             DateFormat *defaultDateTemplate = DateFormat::createDateInstance(DateFormat::kDefault, fLocale);
             DateFormat *shortDateTemplate = DateFormat::createDateInstance(DateFormat::kShort, fLocale);
@@ -837,18 +837,18 @@ MessageFormat::toPattern(UnicodeString& appendTo) const {
             delete fullTimeTemplate;
             // {sfb} there should be a more efficient way to do this!
         }
-        else if ((chcfmt = dynamic_cast<ChoiceFormat*>(fmt)) != NULL) {
+        else if ((chcfmt = (ChoiceFormat*)(fmt)) != NULL) {
             UnicodeString buffer;
             appendTo += COMMA;
             appendTo += ID_CHOICE;
             appendTo += COMMA;
             appendTo += ((ChoiceFormat*)fmt)->toPattern(buffer);
         }
-        else if ((plfmt = dynamic_cast<PluralFormat*>(fmt)) != NULL) {
+        else if ((plfmt = (PluralFormat*)(fmt)) != NULL) {
             UnicodeString buffer;
             appendTo += plfmt->toPattern(buffer);
         }
-        else if ((selfmt = dynamic_cast<SelectFormat*>(fmt)) != NULL) {
+        else if ((selfmt = (SelectFormat*)(fmt)) != NULL) {
             UnicodeString buffer;
             appendTo += ((SelectFormat*)fmt)->toPattern(buffer);
         }
@@ -1246,9 +1246,9 @@ MessageFormat::format(const Formattable* arguments,
 
             // Needs to reprocess the ChoiceFormat and PluralFormat and SelectFormat option by using the
             // MessageFormat pattern application.
-            if ((dynamic_cast<ChoiceFormat*>(fmt) != NULL ||
-                 dynamic_cast<PluralFormat*>(fmt) != NULL ||
-                 dynamic_cast<SelectFormat*>(fmt) != NULL) &&
+            if (((ChoiceFormat*)(fmt) != NULL ||
+                 (PluralFormat*)(fmt) != NULL ||
+                 (SelectFormat*)(fmt) != NULL) &&
                 argNum.indexOf(LEFT_CURLY_BRACE) >= 0
             ) {
                 MessageFormat temp(argNum, fLocale, success);
@@ -1564,7 +1564,7 @@ MessageFormat::makeFormat(int32_t formatNumber,
         default: // pattern
             fmt = NumberFormat::createInstance(fLocale, ec);
             if (fmt) {
-                DecimalFormat* decfmt = dynamic_cast<DecimalFormat*>(fmt);
+                DecimalFormat* decfmt = (DecimalFormat*)(fmt);
                 if (decfmt != NULL) {
                     decfmt->applyPattern(segments[3],parseError,ec);
                 }
@@ -1586,7 +1586,7 @@ MessageFormat::makeFormat(int32_t formatNumber,
         }
 
         if (styleID < 0 && fmt != NULL) {
-            SimpleDateFormat* sdtfmt = dynamic_cast<SimpleDateFormat*>(fmt);
+            SimpleDateFormat* sdtfmt = (SimpleDateFormat*)(fmt);
             if (sdtfmt != NULL) {
                 sdtfmt->applyPattern(segments[3]);
             }
@@ -1748,7 +1748,7 @@ NumberFormat*
 MessageFormat::createIntegerFormat(const Locale& locale, UErrorCode& status) const {
     NumberFormat *temp = NumberFormat::createInstance(locale, status);
     DecimalFormat *temp2;
-    if (temp != NULL && (temp2 = dynamic_cast<DecimalFormat*>(temp)) != NULL) {
+    if (temp != NULL && (temp2 = (DecimalFormat*)(temp)) != NULL) {
         temp2->setMaximumFractionDigits(0);
         temp2->setDecimalSeparatorAlwaysShown(FALSE);
         temp2->setParseIntegerOnly(TRUE);
