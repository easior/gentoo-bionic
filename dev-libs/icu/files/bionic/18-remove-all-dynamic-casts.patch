commit 34188e4e998263d939d4dfa7441a841676b89a78
Author: Christopher Friedt <chrisfriedt@gmail.com>
Date:   Tue May 10 01:04:01 2011 -0400

    removed all dynamic_casts

diff --git a/i18n/basictz.cpp b/i18n/basictz.cpp
index 6b4889a..e359962 100644
--- a/i18n/basictz.cpp
+++ b/i18n/basictz.cpp
@@ -395,7 +395,7 @@ BasicTimeZone::getTimeZoneRulesAfter(UDate start, InitialTimeZoneRule*& initial,
         if (done[i]) {
             continue;
         }
-        const TimeArrayTimeZoneRule *tar = dynamic_cast<const TimeArrayTimeZoneRule *>(toRule);
+        const TimeArrayTimeZoneRule *tar = (const TimeArrayTimeZoneRule *)(toRule);
         const AnnualTimeZoneRule *ar;
         if (tar != NULL) {
             // Get the previous raw offset and DST savings before the very first start time
@@ -466,7 +466,7 @@ BasicTimeZone::getTimeZoneRulesAfter(UDate start, InitialTimeZoneRule*& initial,
                     }
                 }
             }
-        } else if ((ar = dynamic_cast<const AnnualTimeZoneRule *>(toRule)) != NULL) {
+        } else if ((ar = (const AnnualTimeZoneRule *)(toRule)) != NULL) {
             ar->getFirstStart(tzt.getFrom()->getRawOffset(), tzt.getFrom()->getDSTSavings(), firstStart);
             if (firstStart == tzt.getTime()) {
                 // Just add the rule as is
diff --git a/i18n/brktrans.cpp b/i18n/brktrans.cpp
index 5207266..f80ce1b 100644
--- a/i18n/brktrans.cpp
+++ b/i18n/brktrans.cpp
@@ -174,7 +174,7 @@ BreakIterator *BreakTransliterator::getBreakIterator() {
 //
 UnicodeString BreakTransliterator::replaceableAsString(Replaceable &r) {
     UnicodeString s;
-    UnicodeString *rs = dynamic_cast<UnicodeString *>(&r);
+    UnicodeString *rs = (UnicodeString *)(&r);
     if (rs != NULL) {
         s = *rs;
     } else {
diff --git a/i18n/calendar.cpp b/i18n/calendar.cpp
index af29367..eea4c20 100644
--- a/i18n/calendar.cpp
+++ b/i18n/calendar.cpp
@@ -373,7 +373,7 @@ protected:
 
     virtual UObject* create(const ICUServiceKey& key, const ICUService* /*service*/, UErrorCode& status) const {
 #ifdef U_DEBUG_CALSVC
-        if(dynamic_cast<const LocaleKey*>(&key) == NULL) {
+        if((const LocaleKey*)(&key) == NULL) {
             fprintf(stderr, "::create - not a LocaleKey!\n");
         }
 #endif
@@ -444,7 +444,7 @@ public:
     }
 
     virtual UObject* cloneInstance(UObject* instance) const {
-        UnicodeString *s = dynamic_cast<UnicodeString *>(instance);
+        UnicodeString *s = (UnicodeString *)(instance);
         if(s != NULL) {
             return s->clone(); 
         } else {
@@ -814,7 +814,7 @@ Calendar::createInstance(TimeZone* zone, const Locale& aLocale, UErrorCode& succ
     }
 
 #if !UCONFIG_NO_SERVICE
-    const UnicodeString* str = dynamic_cast<const UnicodeString*>(u);
+    const UnicodeString* str = (const UnicodeString*)(u);
     if(str != NULL) {
         // It's a unicode string telling us what type of calendar to load ("gregorian", etc)
         // Create a Locale over this string
@@ -842,7 +842,7 @@ Calendar::createInstance(TimeZone* zone, const Locale& aLocale, UErrorCode& succ
             return NULL;
         }
 
-        str = dynamic_cast<const UnicodeString*>(c);
+        str = (const UnicodeString*)(c);
         if(str != NULL) {
             // recursed! Second lookup returned a UnicodeString. 
             // Perhaps DefaultCalendar{} was set to another locale.
diff --git a/i18n/coll.cpp b/i18n/coll.cpp
index 83c7565..2a2c6ed 100644
--- a/i18n/coll.cpp
+++ b/i18n/coll.cpp
@@ -236,7 +236,7 @@ Collator::createUCollator(const char *loc,
         Locale desiredLocale(loc);
         Collator *col = (Collator*)gService->get(desiredLocale, *status);
         RuleBasedCollator *rbc;
-        if (col && (rbc = dynamic_cast<RuleBasedCollator *>(col))) {
+        if (col && (rbc = (RuleBasedCollator *)(col))) {
             if (!rbc->dataIsOwned) {
                 result = ucol_safeClone(rbc->ucollator, NULL, NULL, status);
             } else {
diff --git a/i18n/dtitvfmt.cpp b/i18n/dtitvfmt.cpp
index 8bb6c6e..bf93758 100644
--- a/i18n/dtitvfmt.cpp
+++ b/i18n/dtitvfmt.cpp
@@ -243,7 +243,7 @@ DateIntervalFormat::format(const Formattable& obj,
 
     if ( obj.getType() == Formattable::kObject ) {
         const UObject* formatObj = obj.getObject();
-        const DateInterval* interval = dynamic_cast<const DateInterval*>(formatObj);
+        const DateInterval* interval = (const DateInterval*)(formatObj);
         if (interval != NULL){
             return format(interval, appendTo, fieldPosition, status);
         }
diff --git a/i18n/olsontz.cpp b/i18n/olsontz.cpp
index b9b2e05..dea8543 100644
--- a/i18n/olsontz.cpp
+++ b/i18n/olsontz.cpp
@@ -594,7 +594,7 @@ OlsonTimeZone::hasSameRules(const TimeZone &other) const {
     if (this == &other) {
         return TRUE;
     }
-    const OlsonTimeZone* z = dynamic_cast<const OlsonTimeZone*>(&other);
+    const OlsonTimeZone* z = (const OlsonTimeZone*)(&other);
     if (z == NULL) {
         return FALSE;
     }
diff --git a/i18n/rbnf.cpp b/i18n/rbnf.cpp
index b8d392a..93d013e 100644
--- a/i18n/rbnf.cpp
+++ b/i18n/rbnf.cpp
@@ -1553,7 +1553,7 @@ RuleBasedNumberFormat::getCollator() const
 
         Collator* temp = Collator::createInstance(locale, status);
         RuleBasedCollator* newCollator;
-        if (U_SUCCESS(status) && (newCollator = dynamic_cast<RuleBasedCollator*>(temp)) != NULL) {
+        if (U_SUCCESS(status) && (newCollator = (RuleBasedCollator*)(temp)) != NULL) {
             if (lenientParseRules) {
                 UnicodeString rules(newCollator->getRules());
                 rules.append(*lenientParseRules);
diff --git a/i18n/rbtz.cpp b/i18n/rbtz.cpp
index 961c8fb..0944028 100644
--- a/i18n/rbtz.cpp
+++ b/i18n/rbtz.cpp
@@ -115,7 +115,7 @@ RuleBasedTimeZone::addTransitionRule(TimeZoneRule* rule, UErrorCode& status) {
     if (U_FAILURE(status)) {
         return;
     }
-    AnnualTimeZoneRule* atzrule = dynamic_cast<AnnualTimeZoneRule*>(rule);
+    AnnualTimeZoneRule* atzrule = (AnnualTimeZoneRule*)(rule);
     if (atzrule != NULL && atzrule->getEndYear() == AnnualTimeZoneRule::MAX_YEAR) {
         // A final rule
         if (fFinalRules == NULL) {
diff --git a/i18n/tmutfmt.cpp b/i18n/tmutfmt.cpp
index 01ed795..b364bfa 100644
--- a/i18n/tmutfmt.cpp
+++ b/i18n/tmutfmt.cpp
@@ -202,7 +202,7 @@ TimeUnitFormat::format(const Formattable& obj, UnicodeString& toAppendTo,
     }
     if (obj.getType() == Formattable::kObject) {
         const UObject* formatObj = obj.getObject();
-        const TimeUnitAmount* amount = dynamic_cast<const TimeUnitAmount*>(formatObj);
+        const TimeUnitAmount* amount = (const TimeUnitAmount*)(formatObj);
         if (amount != NULL){
             Hashtable* countToPattern = fTimeUnitToCountToPatterns[amount->getTimeUnitField()];
             double number;
diff --git a/i18n/translit.cpp b/i18n/translit.cpp
index 8436479..651db9c 100644
--- a/i18n/translit.cpp
+++ b/i18n/translit.cpp
@@ -1158,7 +1158,7 @@ UnicodeString& Transliterator::toRules(UnicodeString& rulesSource,
 }
 
 int32_t Transliterator::countElements() const {
-    const CompoundTransliterator* ct = dynamic_cast<const CompoundTransliterator*>(this);
+    const CompoundTransliterator* ct = (const CompoundTransliterator*)(this);
     return ct != NULL ? ct->getCount() : 0;
 }
 
@@ -1166,7 +1166,7 @@ const Transliterator& Transliterator::getElement(int32_t index, UErrorCode& ec)
     if (U_FAILURE(ec)) {
         return *this;
     }
-    const CompoundTransliterator* cpd = dynamic_cast<const CompoundTransliterator*>(this);
+    const CompoundTransliterator* cpd = (const CompoundTransliterator*)(this);
     int32_t n = (cpd == NULL) ? 1 : cpd->getCount();
     if (index < 0 || index >= n) {
         ec = U_INDEX_OUTOFBOUNDS_ERROR;
@@ -1179,7 +1179,7 @@ const Transliterator& Transliterator::getElement(int32_t index, UErrorCode& ec)
 UnicodeSet& Transliterator::getSourceSet(UnicodeSet& result) const {
     handleGetSourceSet(result);
     if (filter != NULL) {
-        UnicodeSet* filterSet = dynamic_cast<UnicodeSet*>(filter);
+        UnicodeSet* filterSet = (UnicodeSet*)(filter);
         UBool deleteFilterSet = FALSE;
         // Most, but not all filters will be UnicodeSets.  Optimize for
         // the high-runner case.
diff --git a/i18n/ucal.cpp b/i18n/ucal.cpp
index 5a659e5..23bac27 100644
--- a/i18n/ucal.cpp
+++ b/i18n/ucal.cpp
@@ -85,7 +85,7 @@ ucal_getDSTSavings(const UChar* zoneID, UErrorCode* ec) {
     int32_t result = 0;
     TimeZone* zone = _createTimeZone(zoneID, -1, ec);
     if (U_SUCCESS(*ec)) {
-        SimpleTimeZone* stz = dynamic_cast<SimpleTimeZone*>(zone);
+        SimpleTimeZone* stz = (SimpleTimeZone*)(zone);
         if (stz != NULL) {
             result = stz->getDSTSavings();
         } else {
@@ -247,7 +247,7 @@ ucal_setGregorianChange(UCalendar *cal, UDate date, UErrorCode *pErrorCode) {
         return;
     }
     Calendar *cpp_cal = (Calendar *)cal;
-    GregorianCalendar *gregocal = dynamic_cast<GregorianCalendar *>(cpp_cal);
+    GregorianCalendar *gregocal = (GregorianCalendar *)(cpp_cal);
     // Not if(gregocal == NULL) {
     // because we really want to work only with a GregorianCalendar, not with
     // its subclasses like BuddhistCalendar.
@@ -264,7 +264,7 @@ ucal_getGregorianChange(const UCalendar *cal, UErrorCode *pErrorCode) {
         return (UDate)0;
     }
     const Calendar *cpp_cal = (const Calendar *)cal;
-    const GregorianCalendar *gregocal = dynamic_cast<const GregorianCalendar *>(cpp_cal);
+    const GregorianCalendar *gregocal = (const GregorianCalendar *)(cpp_cal);
     // Not if(gregocal == NULL) {
     // see comments in ucal_setGregorianChange().
     if(typeid(*cpp_cal) != typeid(GregorianCalendar)) {
diff --git a/i18n/vtzone.cpp b/i18n/vtzone.cpp
index 51a6a81..fc366ff 100644
--- a/i18n/vtzone.cpp
+++ b/i18n/vtzone.cpp
@@ -1595,7 +1595,7 @@ VTimeZone::parse(UErrorCode& status) {
 
     for (n = 0; n < rules->size(); n++) {
         TimeZoneRule *r = (TimeZoneRule*)rules->elementAt(n);
-        AnnualTimeZoneRule *atzrule = dynamic_cast<AnnualTimeZoneRule *>(r);
+        AnnualTimeZoneRule *atzrule = (AnnualTimeZoneRule *)(r);
         if (atzrule != NULL) {
             if (atzrule->getEndYear() == AnnualTimeZoneRule::MAX_YEAR) {
                 finalRuleCount++;
@@ -1956,7 +1956,7 @@ VTimeZone::writeZone(VTZWriter& w, BasicTimeZone& basictz,
         const AnnualTimeZoneRule *atzrule;
         if (isDst) {
             if (finalDstRule == NULL
-                && (atzrule = dynamic_cast<const AnnualTimeZoneRule *>(tzt.getTo())) != NULL
+                && (atzrule = (const AnnualTimeZoneRule *)(tzt.getTo())) != NULL
                 && atzrule->getEndYear() == AnnualTimeZoneRule::MAX_YEAR
             ) {
                 finalDstRule = (AnnualTimeZoneRule*)tzt.getTo()->clone();
@@ -2007,7 +2007,7 @@ VTimeZone::writeZone(VTZWriter& w, BasicTimeZone& basictz,
             }
         } else {
             if (finalStdRule == NULL
-                && (atzrule = dynamic_cast<const AnnualTimeZoneRule *>(tzt.getTo())) != NULL
+                && (atzrule = (const AnnualTimeZoneRule *)(tzt.getTo())) != NULL
                 && atzrule->getEndYear() == AnnualTimeZoneRule::MAX_YEAR
             ) {
                 finalStdRule = (AnnualTimeZoneRule*)tzt.getTo()->clone();
diff --git a/i18n/zstrfmt.cpp b/i18n/zstrfmt.cpp
index acd3546..bd7407f 100644
--- a/i18n/zstrfmt.cpp
+++ b/i18n/zstrfmt.cpp
@@ -1466,10 +1466,10 @@ ZoneStringFormat::getGenericString(const Calendar &cal, UBool isShort, UBool com
                 // Check if the zone actually uses daylight saving time around the time
                 TimeZone *tmptz = tz.clone();
                 BasicTimeZone *btz = NULL;
-                if (dynamic_cast<OlsonTimeZone *>(tmptz) != NULL
-                    || dynamic_cast<SimpleTimeZone *>(tmptz) != NULL
-                    || dynamic_cast<RuleBasedTimeZone *>(tmptz) != NULL
-                    || dynamic_cast<VTimeZone *>(tmptz) != NULL) {
+                if ((OlsonTimeZone *)(tmptz) != NULL
+                    || (SimpleTimeZone *)(tmptz) != NULL
+                    || (RuleBasedTimeZone *)(tmptz) != NULL
+                    || (VTimeZone *)(tmptz) != NULL) {
                     btz = (BasicTimeZone*)tmptz;
                 }
 
diff --git a/samples/numfmt/main.cpp b/samples/numfmt/main.cpp
index 5adffe3..cc426b8 100644
--- a/samples/numfmt/main.cpp
+++ b/samples/numfmt/main.cpp
@@ -113,7 +113,7 @@ setNumberFormatCurrency_2_4(NumberFormat &nf, const char *currency, UErrorCode &
     // check that the formatter is a DecimalFormat instance
     // necessary because we will cast to the DecimalFormat subclass to set
     // the currency symbol
-    DecimalFormat *dnf=dynamic_cast<DecimalFormat *>(&nf);
+    DecimalFormat *dnf=(DecimalFormat *)(&nf);
     if(dnf==NULL) {
         errorCode=U_ILLEGAL_ARGUMENT_ERROR;
         return;
diff --git a/test/intltest/caltest.cpp b/test/intltest/caltest.cpp
index bac3435..97480d8 100644
--- a/test/intltest/caltest.cpp
+++ b/test/intltest/caltest.cpp
@@ -2034,7 +2034,7 @@ static UDate doMinDateOfCalendar(Calendar* adopt, UBool &isGregorian, UErrorCode
   adopt->clear();
   adopt->set(UCAL_EXTENDED_YEAR, adopt->getActualMinimum(UCAL_EXTENDED_YEAR, status));
   UDate ret = adopt->getTime(status);
-  isGregorian = dynamic_cast<GregorianCalendar*>(adopt) != NULL;
+  isGregorian = (GregorianCalendar*)(adopt) != NULL;
   delete adopt;
   return ret;
 }
diff --git a/test/intltest/dtfmapts.cpp b/test/intltest/dtfmapts.cpp
index c3eaed5..391577e 100644
--- a/test/intltest/dtfmapts.cpp
+++ b/test/intltest/dtfmapts.cpp
@@ -108,7 +108,7 @@ void IntlTestDateFormatAPI::TestEquals(void)
     if (!(*a == *b))
         errln("FAIL: DateFormat objects created at different times are unequal.");
 
-    SimpleDateFormat *sdtfmt = dynamic_cast<SimpleDateFormat *>(b);
+    SimpleDateFormat *sdtfmt = (SimpleDateFormat *)(b);
     if (sdtfmt != NULL)
     {
         double ONE_YEAR = 365*24*60*60*1000.0;
diff --git a/test/intltest/dtfmttst.cpp b/test/intltest/dtfmttst.cpp
index 924afba..3b8070f 100644
--- a/test/intltest/dtfmttst.cpp
+++ b/test/intltest/dtfmttst.cpp
@@ -402,7 +402,7 @@ void DateFormatTest::TestFieldPosition() {
         //  String str;
         DateFormat* df = dateFormats[j];
         df->setTimeZone(*PT);
-        SimpleDateFormat* sdtfmt = dynamic_cast<SimpleDateFormat*>(df);
+        SimpleDateFormat* sdtfmt = (SimpleDateFormat*)(df);
         if (sdtfmt != NULL) {
             logln(" Pattern = " + sdtfmt->toPattern(buf.remove()));
         } else {
diff --git a/test/intltest/icusvtst.cpp b/test/intltest/icusvtst.cpp
index 1a2e15a..3e8725e 100644
--- a/test/intltest/icusvtst.cpp
+++ b/test/intltest/icusvtst.cpp
@@ -117,7 +117,7 @@ class TestIntegerService : public ICUService {
     virtual ICUServiceFactory* createSimpleFactory(UObject* obj, const UnicodeString& id, UBool visible, UErrorCode& status) 
     {
         Integer* i;
-        if (U_SUCCESS(status) && obj && (i = dynamic_cast<Integer*>(obj)) != NULL) {
+        if (U_SUCCESS(status) && obj && (i = (Integer*)(obj)) != NULL) {
             return new SimpleFactory(i, id, visible);
         }
         return NULL;
@@ -160,11 +160,11 @@ UnicodeString append(UnicodeString& result, const UObject* obj)
         const UnicodeString* s;
         const Locale* loc;
         const Integer* i;
-        if ((s = dynamic_cast<const UnicodeString*>(obj)) != NULL) {
+        if ((s = (const UnicodeString*)(obj)) != NULL) {
             result.append(*s);
-        } else if ((loc = dynamic_cast<const Locale*>(obj)) != NULL) {
+        } else if ((loc = (const Locale*)(obj)) != NULL) {
             result.append(loc->getName());
-        } else if ((i = dynamic_cast<const Integer*>(obj)) != NULL) {
+        } else if ((i = (const Integer*)(obj)) != NULL) {
             sprintf(buffer, "%d", (int)i->_val);
             result.append(buffer);
         } else {
@@ -481,7 +481,7 @@ public:
                 // have to implement cloneInstance.  Otherwise we could just tell the service
                 // what the object type is when we create it, and the default implementation
                 // could handle everything for us.  Phooey.
-        if (obj && dynamic_cast<UnicodeString*>(obj) != NULL) {
+        if (obj && (UnicodeString*)(obj) != NULL) {
                         return ICUService::createSimpleFactory(obj, id, visible, status);
         }
         return NULL;
@@ -501,7 +501,7 @@ class TestStringService : public ICUService {
   virtual ICUServiceFactory* createSimpleFactory(UObject* obj, const UnicodeString& id, UBool visible, UErrorCode& /* status */) 
     {
         UnicodeString* s;
-        if (obj && (s = dynamic_cast<UnicodeString*>(obj)) != NULL) {
+        if (obj && (s = (UnicodeString*)(obj)) != NULL) {
             return new SimpleFactory(s, id, visible);
         }
         return NULL;
diff --git a/test/intltest/intltest.cpp b/test/intltest/intltest.cpp
index 508368c..d3c6458 100644
--- a/test/intltest/intltest.cpp
+++ b/test/intltest/intltest.cpp
@@ -171,7 +171,7 @@ UnicodeString _toString(const Formattable& f) {
         }
         break;
     case Formattable::kObject: {
-        const CurrencyAmount* c = dynamic_cast<const CurrencyAmount*>(f.getObject());
+        const CurrencyAmount* c = (const CurrencyAmount*)(f.getObject());
         if (c != NULL) {
             s = _toString(c->getNumber()) + " " + UnicodeString(c->getISOCurrency());
         } else {
diff --git a/test/intltest/loctest.cpp b/test/intltest/loctest.cpp
index 0e46dd0..936ff82 100644
--- a/test/intltest/loctest.cpp
+++ b/test/intltest/loctest.cpp
@@ -1847,7 +1847,7 @@ void LocaleTest::TestGetLocale(void) {
     if (U_FAILURE(ec)) {
         dataerrln("FAIL: NumberFormat::createInstance failed - %s", u_errorName(ec));
     } else {
-        DecimalFormat* dec = dynamic_cast<DecimalFormat*>(nf);
+        DecimalFormat* dec = (DecimalFormat*)(nf);
         if (dec == NULL) {
             errln("FAIL: NumberFormat::createInstance does not return a DecimalFormat");
             return;
@@ -1885,7 +1885,7 @@ void LocaleTest::TestGetLocale(void) {
     if (df == 0){
         dataerrln("Error calling DateFormat::createDateInstance()");
     } else {
-        SimpleDateFormat* dat = dynamic_cast<SimpleDateFormat*>(df);
+        SimpleDateFormat* dat = (SimpleDateFormat*)(df);
         if (dat == NULL) {
             errln("FAIL: DateFormat::createInstance does not return a SimpleDateFormat");
             return;
diff --git a/test/intltest/nmfmtrt.cpp b/test/intltest/nmfmtrt.cpp
index c2c962a..89266ea 100644
--- a/test/intltest/nmfmtrt.cpp
+++ b/test/intltest/nmfmtrt.cpp
@@ -182,7 +182,7 @@ NumberFormatRoundTripTest::test(NumberFormat *fmt)
         // I'll get around this by dividing by the multiplier to make sure
         // the double will stay in range.
         //if(fmt->getMultipler() == 1)
-        DecimalFormat *df = dynamic_cast<DecimalFormat *>(fmt);
+        DecimalFormat *df = (DecimalFormat *)(fmt);
         if(df != NULL)
         {
 #if !defined(OS390) && !defined(OS400)
@@ -230,7 +230,7 @@ void
 NumberFormatRoundTripTest::test(NumberFormat *fmt, const Formattable& value)
 {
     fmt->setMaximumFractionDigits(999);
-    DecimalFormat *df = dynamic_cast<DecimalFormat *>(fmt);
+    DecimalFormat *df = (DecimalFormat *)(fmt);
     if(df != NULL) {
         df->setRoundingIncrement(0.0);
     }
diff --git a/test/intltest/numfmtst.cpp b/test/intltest/numfmtst.cpp
index 0824b9c..b207894 100644
--- a/test/intltest/numfmtst.cpp
+++ b/test/intltest/numfmtst.cpp
@@ -1449,7 +1449,7 @@ void NumberFormatTest::TestCurrencyPatterns(void) {
             }
 
             // Make sure EURO currency formats have exactly 2 fraction digits
-            DecimalFormat* df = dynamic_cast<DecimalFormat*>(nf);
+            DecimalFormat* df = (DecimalFormat*)(nf);
             if (df != NULL) {
                 if (u_strcmp(EUR, df->getCurrency()) == 0) {
                     if (min != 2 || max != 2) {
@@ -2865,7 +2865,7 @@ NumberFormatTest::TestCurrencyFormatForMixParsing() {
         if (U_FAILURE(status)) {
           errln("FAIL: measure format parsing: '%s' ec: %s", formats[i], u_errorName(status));
         } else if (result.getType() != Formattable::kObject ||
-            (curramt = dynamic_cast<const CurrencyAmount*>(result.getObject())) == NULL ||
+            (curramt = (const CurrencyAmount*)(result.getObject())) == NULL ||
             curramt->getNumber().getDouble() != 1234.56 ||
             UnicodeString(curramt->getISOCurrency()).compare(ISO_CURRENCY_USD)
         ) {
diff --git a/test/intltest/numrgts.cpp b/test/intltest/numrgts.cpp
index ab55bc2..ffca29a 100644
--- a/test/intltest/numrgts.cpp
+++ b/test/intltest/numrgts.cpp
@@ -505,7 +505,7 @@ void NumberFormatRegressionTest::Test4086575(void)
     failure(status, "NumberFormat::createInstance", Locale::getFrance());
 
     // C++ workaround to make sure cast works
-    DecimalFormat *nf = dynamic_cast<DecimalFormat *>(nf1);
+    DecimalFormat *nf = (DecimalFormat *)(nf1);
     if(nf == NULL) {
         errln("NumberFormat::createInstance returned incorrect type.");
         return;
@@ -841,7 +841,7 @@ void NumberFormatRegressionTest::Test4087244 (void) {
       delete nf;
       return;
     }
-    DecimalFormat *df = dynamic_cast<DecimalFormat *>(nf);
+    DecimalFormat *df = (DecimalFormat *)(nf);
     if(df == NULL) {
         errln("expected DecimalFormat!");
         return;
@@ -1912,7 +1912,7 @@ void NumberFormatRegressionTest::Test4145457() {
         delete nff;
         return;
     };
-    DecimalFormat *nf = dynamic_cast<DecimalFormat *>(nff);
+    DecimalFormat *nf = (DecimalFormat *)(nff);
     if(nf == NULL) {
         errln("DecimalFormat needed to continue");
         return;
@@ -2189,7 +2189,7 @@ void NumberFormatRegressionTest::Test4170798(void) {
         delete nf;
         return;
     };
-    DecimalFormat *df = dynamic_cast<DecimalFormat *>(nf);
+    DecimalFormat *df = (DecimalFormat *)(nf);
     if(df == NULL) {
         errln("DecimalFormat needed to continue");
         return;
diff --git a/test/intltest/pptest.cpp b/test/intltest/pptest.cpp
index 594ff21..8ac9a66 100644
--- a/test/intltest/pptest.cpp
+++ b/test/intltest/pptest.cpp
@@ -182,7 +182,7 @@ void ParsePositionTest::TestFieldPosition_example()
         return;
     };
 
-    DecimalFormat *fmt = dynamic_cast<DecimalFormat *>(nf);
+    DecimalFormat *fmt = (DecimalFormat *)(nf);
     if(fmt == NULL) {
         errln("NumberFormat::createInstance returned unexpected class type");
         return;
diff --git a/test/intltest/tzregts.cpp b/test/intltest/tzregts.cpp
index 0f06817..c129478 100644
--- a/test/intltest/tzregts.cpp
+++ b/test/intltest/tzregts.cpp
@@ -1093,7 +1093,7 @@ TimeZoneRegressionTest::TestJDK12API()
         return;
     }
 
-    SimpleTimeZone *cst = dynamic_cast<SimpleTimeZone *>(cst1);
+    SimpleTimeZone *cst = (SimpleTimeZone *)(cst1);
 
     if(pst->hasSameRules(*cst)) {
         errln("FAILURE: PST and CST have same rules");
diff --git a/test/intltest/tztest.cpp b/test/intltest/tztest.cpp
index 7b6eed9..9c186f2 100644
--- a/test/intltest/tztest.cpp
+++ b/test/intltest/tztest.cpp
@@ -953,7 +953,7 @@ void TimeZoneTest::TestCustomParse()
         TimeZone *zone = TimeZone::createTimeZone(id);
         UnicodeString   itsID, temp;
 
-        if (dynamic_cast<OlsonTimeZone *>(zone) != NULL) {
+        if ((OlsonTimeZone *)(zone) != NULL) {
             logln(id + " -> Olson time zone");
         } else {
             zone->getID(itsID);
diff --git a/test/intltest/uobjtest.cpp b/test/intltest/uobjtest.cpp
index efbf952..f836057 100644
--- a/test/intltest/uobjtest.cpp
+++ b/test/intltest/uobjtest.cpp
@@ -568,8 +568,8 @@ void UObjectTest::TestCompilerRTTI() {
         dataerrln("NumberFormat::createInstance(de) failed - %s", u_errorName(errorCode));
         return;
     }
-    if (dynamic_cast<DecimalFormat *>(nf) == NULL || dynamic_cast<ChoiceFormat *>(nf) != NULL) {
-        errln("dynamic_cast<>(NumberFormat) failed");
+    if ((DecimalFormat *>(nf) == NULL || dynamic_cast<ChoiceFormat *)(nf) != NULL) {
+        errln("()(NumberFormat) failed");
     }
     UnicodeSet emptySet;
     if (&typeid(*nf) == NULL || typeid(*nf) == typeid(UObject) || typeid(*nf) == typeid(Format) ||
diff --git a/tools/toolutil/xmlparser.cpp b/tools/toolutil/xmlparser.cpp
index 134fdcf..11e7d38 100644
--- a/tools/toolutil/xmlparser.cpp
+++ b/tools/toolutil/xmlparser.cpp
@@ -715,7 +715,7 @@ UXMLElement::appendText(UnicodeString &text, UBool recurse) const {
     int32_t i, count=fChildren.size();
     for(i=0; i<count; ++i) {
         node=(const UObject *)fChildren.elementAt(i);
-        const UnicodeString *s=dynamic_cast<const UnicodeString *>(node);
+        const UnicodeString *s=(const UnicodeString *)(node);
         if(s!=NULL) {
             text.append(*s);
         } else if(recurse) /* must be a UXMLElement */ {
@@ -767,7 +767,7 @@ const UObject *
 UXMLElement::getChild(int32_t i, UXMLNodeType &type) const {
     if(0<=i && i<fChildren.size()) {
         const UObject *node=(const UObject *)fChildren.elementAt(i);
-        if(dynamic_cast<const UXMLElement *>(node)!=NULL) {
+        if((const UXMLElement *)(node)!=NULL) {
             type=UXML_NODE_TYPE_ELEMENT;
         } else {
             type=UXML_NODE_TYPE_STRING;
@@ -788,7 +788,7 @@ UXMLElement::nextChildElement(int32_t &i) const {
     int32_t count=fChildren.size();
     while(i<count) {
         node=(const UObject *)fChildren.elementAt(i++);
-        const UXMLElement *elem=dynamic_cast<const UXMLElement *>(node);
+        const UXMLElement *elem=(const UXMLElement *)(node);
         if(elem!=NULL) {
             return elem;
         }
@@ -809,7 +809,7 @@ UXMLElement::getChildElement(const UnicodeString &name) const {
     int32_t i, count=fChildren.size();
     for(i=0; i<count; ++i) {
         node=(const UObject *)fChildren.elementAt(i);
-        const UXMLElement *elem=dynamic_cast<const UXMLElement *>(node);
+        const UXMLElement *elem=(const UXMLElement *)(node);
         if(elem!=NULL) {
             if(p==elem->fName) {
                 return elem;
