commit 0f855c657073f778e79da0dd827625c3f686433f
Author: Christopher Friedt <chrisfriedt@gmail.com>
Date:   Tue May 10 12:50:06 2011 -0400

    use SIGUSR2 instead of SIGUSR2

diff --git a/src/thread.c b/src/thread.c
index dd5e27d..289b646 100644
--- a/src/thread.c
+++ b/src/thread.c
@@ -226,7 +226,7 @@ void threadInterrupt(Thread *thread) {
        it will deadlock.  To prevent this, disable suspension. */
 
     fastDisableSuspend(self);
-    pthread_kill(thread->tid, SIGUSR1);
+    pthread_kill(thread->tid, SIGUSR2);
     fastEnableSuspend(self);
 }
 
@@ -830,7 +830,7 @@ void suspendThread(Thread *thread) {
     if(!thread->blocking) {
         TRACE("Sending suspend signal to thread 0x%x id: %d\n",
               thread, thread->id);
-        pthread_kill(thread->tid, SIGUSR1);
+        pthread_kill(thread->tid, SIGUSR2);
     }
 
     while(thread->blocking != SUSP_BLOCKING && thread->state != SUSPENDED) {
@@ -847,7 +847,7 @@ void resumeThread(Thread *thread) {
     if(!thread->blocking) {
         TRACE("Sending resume signal to thread 0x%x id: %d\n",
               thread, thread->id);
-        pthread_kill(thread->tid, SIGUSR1);
+        pthread_kill(thread->tid, SIGUSR2);
     }
 
     while(thread->state == SUSPENDED) {
@@ -872,7 +872,7 @@ void suspendAllThreads(Thread *self) {
         if(!thread->blocking) {
             TRACE("Sending suspend signal to thread 0x%x id: %d\n",
                   thread, thread->id);
-            pthread_kill(thread->tid, SIGUSR1);
+            pthread_kill(thread->tid, SIGUSR2);
         }
     }
 
@@ -909,7 +909,7 @@ void resumeAllThreads(Thread *self) {
         if(!thread->blocking) {
             TRACE("Sending resume signal to thread 0x%x id: %d\n",
                   thread, thread->id);
-            pthread_kill(thread->tid, SIGUSR1);
+            pthread_kill(thread->tid, SIGUSR2);
         }
     }
 
@@ -943,7 +943,7 @@ static void suspendLoop(Thread *thread) {
     MBARRIER();
 
     sigfillset(&mask);
-    sigdelset(&mask, SIGUSR1);
+    sigdelset(&mask, SIGUSR2);
     sigdelset(&mask, SIGTERM);
 
     while(thread->suspend && !thread->blocking)
@@ -969,7 +969,7 @@ void disableSuspend0(Thread *thread, void *stack_top) {
     MBARRIER();
 
     sigemptyset(&mask);
-    sigaddset(&mask, SIGUSR1);
+    sigaddset(&mask, SIGUSR2);
     pthread_sigmask(SIG_BLOCK, &mask, NULL);
 }
 
@@ -986,7 +986,7 @@ void enableSuspend(Thread *thread) {
     }
 
     sigemptyset(&mask);
-    sigaddset(&mask, SIGUSR1);
+    sigaddset(&mask, SIGUSR2);
     pthread_sigmask(SIG_UNBLOCK, &mask, NULL);
 }
 
@@ -1005,7 +1005,7 @@ void fastEnableSuspend(Thread *thread) {
         sigset_t mask;
 
         sigemptyset(&mask);
-        sigaddset(&mask, SIGUSR1);
+        sigaddset(&mask, SIGUSR2);
         pthread_sigmask(SIG_BLOCK, &mask, NULL);
 
         TRACE("Thread 0x%x id: %d is fast self suspending\n",
@@ -1098,7 +1098,7 @@ static void initialiseSignals() {
     act.sa_handler = suspendHandler;
     sigemptyset(&act.sa_mask);
     act.sa_flags = 0;
-    sigaction(SIGUSR1, &act, NULL);
+    sigaction(SIGUSR2, &act, NULL);
 
     sigemptyset(&mask);
     sigaddset(&mask, SIGQUIT);
